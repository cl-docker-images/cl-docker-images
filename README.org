#+TITLE: CL Docker Images Project

* Overview

  The purpose of this project is to make it easy to use any open source ANSI
  Common Lisp implementation inside a Docker container. To that end, we publish
  a variety of prebuilt images to the [[https://hub.docker.com/u/clfoundation][=clfoundation= org on Docker Hub]] that
  share common layers and methodologies (such as entrypoint behavior) as much
  as possible.

  Docker is a useful technology for Lisp as it can make some CI/CD and
  deployment tasks easier.

  So far, we publish the following types of images:

  + Implementation specific :: These images contain a single Common Lisp
    implementation.

  We publish images for the following platforms. If someone would like to
  donate hardware or expertise for setting up environments for other platforms,
  please reach out!

  + =linux/amd64=
  + =linux/arm/v7=
  + =linux/arm64/v8=
  + =windows/amd64=

* Implementation Specific Images

  These images contain a single Common Lisp implementation. They should all
  follow best practices for Docker and be designed so that if upstream wanted,
  the image could be submitted to [[https://github.com/docker-library/official-images][Docker's Official Image Program]] (aka the
  Docker standard library).

  We currently publish images for the following implementations:

  + [[https://hub.docker.com/r/clfoundation/abcl][ABCL]] :: Source at [[https://gitlab.common-lisp.net/cl-docker-images/abcl]]
  + [[https://hub.docker.com/r/clfoundation/ccl][CCL]] :: Source at [[https://gitlab.common-lisp.net/cl-docker-images/ccl]]
  + [[https://hub.docker.com/r/clfoundation/ecl][ECL]] :: Source at [[https://gitlab.common-lisp.net/cl-docker-images/ecl]]
  + [[https://hub.docker.com/r/clfoundation/sbcl][SBCL]] :: Source at [[https://gitlab.common-lisp.net/cl-docker-images/sbcl]]

  Any requests or offers of support for new implementation specific images
  should be made as an issue on this repo.

  For every supported version of an implementation, the default tag should be a
  "fat" image that contains libraries equivalent to those found in
  [[https://hub.docker.com/_/buildpack-deps][buildpack-deps]], the CL implementation itself, the source code for the
  implementation, a specialized entrypoint, and the Quicklisp installer. The
  entrypoint should invoke the the implemtation if no command is specified or
  the first element of the command list is an option (starts with a =-=). Only
  the Quicklisp installer is included as an installed Quicklisp is not
  particularly amenable to Dockerization for two reasons. First there is no
  real system-wide install option, the user has to have write bits to the
  entire Quicklisp hierarchy. Second, installing fetches the package lists,
  pinning them to the point in time the image was made.

  In addition to the fat images, there should be a set of tags for a "slim"
  variant that includes only the implementation, the dependencies needed to
  start the implementation, and the same specialized entrypoint as above.

  For implementations that support it, there should also be a set of
  =windowsservercore= based tags and Alpine based tags (useful for space
  constraints or creating static executables).

  We try to bump versions within a week of a new version of the implementation
  being released. In addition to building images for released versions, we
  attempt to build nightly images directly from the implementation's source
  control. However, these nightly images should be considered "best effort" and
  may get scaled back or stopped altogether at some point in the future.

* Infrastructure

  The images are automatically built using Gitlab CI. Gitlab CI was chosen
  largely because of its extreme flexibility, Travis CI's new free-tier limits,
  and Github Actions both not providing hosted ARM instances and not providing
  a secure way to bring custom runners to public repos.

  The runners for this Gitlab group are currently hosted by Eric Timmons. See
  [[file:ci.org][ci.org]] for info on how these runners are configured.

  We use [[https://github.com/docker-library/bashbrew][bashbrew]] to build the images. This is the same tool used by the Docker
  Official Images team. It makes building multi-arch images easy, makes it easy
  to submit iamges to the Official Images program, and means we don't need to
  write as much of our own tooling (yay!).

* Roadmap

  + Sign the images pushed to the clfoundation org on Docker Hub. Blocked by:
    1. Need to have a second person willing to have signing abilities to
       increase the bus factor.
    2. bashrew is unable to sign image manifests. We'd either need to replace
       bashbrew or get a feature upstreamed to sign them.
    3. Some base images (such as openjdk, used by the ABCL images) are not
       signed. Need to determine if we should sign them even though we don't
       have a complete chain of trust.
  + Add automatic Quicklisp install capability to the entrypoint script. This
    will likely install Quicklisp using the bundled install script (if it is
    not already installed) if an environment variable is set. There will likely
    be additional environment variables to configure the owner of the Quicklisp
    install, where it is located, which dist version to install, etc.
  + Add a "kitchen sink" image. This image would have every CL implementation
    available, as well as the libraries necessary to load every library in the
    primary Quicklisp distribution. This would likely be based on the
    [[https://github.com/daewok/lisp-devel-docker/][=daewok/lisp-devel-docker=]] image. Blocked by:
    1. The automatic Quicklisp install mentioned above.
    2. Need to decide if the latest ASDF version should be included and
       how. Some people are very picky about which version of ASDF they use and
       some ways of installing ASDF make it very hard to replace with an older
       version.
    3. Decide if a user other than the root user should be created.

* History

  These images are derived from Eric Timmons's CL Docker images, with some
  improvements to add a few more features and better follow the guidelines of
  the Official Images program. They were moved to community orgs in order to
  encourage more community participation and try to ensure the images survive
  if he ever has less time to dedicate to them.
